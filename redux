import { legacy_createStore as createStore} from 'redux'

const redux = require('redux')
const createStore = redux.configureStore

const BUY_CAKE = 'BUY_CAKE' //string const defining type of action 
const BUY_ICECREAM = 'BUY_ICECREAM' 
//defining action type buy_cake
{
    type:BUY_CAKE,
    
}

function buyCake(){
    return{
        type:BUY_CAKE , 
        info: 'First redux action  '
    }
}

function buyIceCream(){
    return{
        type:BUY_ICECREAM , 
    }
}

// (prevstate , action ) => (newstate)

const initialState = {
    numOfCakes: 10 , 
    numOfIceCreams : 20 
}

const reducer = (state=initialState , action) =>{
    switch(action.type) {
      case BUY_CAKE : return {
        ... state , 
      numOfCakes : state.numOfCakes -1 
    }
}
    switch(action.type) {
        case BUY_ICECREAM : return {
          ... state , 
        numOfIceCreams : state.numOfIceCreams -1 
      }
  
       default: return state
     
}
}

const store =configureStore(reducer)
console.log('intial state' , store.getState())
const unsubscribe = store.subscribe(() => console.log(('updated state' , store.getState())))
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyIceCream())
store.dispatch(buyIceCream())
unsubscribe()
